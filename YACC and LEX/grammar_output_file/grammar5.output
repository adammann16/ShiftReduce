Terminals unused in grammar

   ID
   STRING
   SHARED
   PRIVATE
   INTEGER
   SEMAPHORE
   RESTRICT
   PROGRAM
   PROCEDURE
   PROCESS
   P
   V
   ASSERT
   PRINT
   WHILE
   IF
   THEN
   ELSE
   PLUS
   MINUS
   TIMES
   MOD
   AND
   OR
   NOT
   LE
   LT
   EQ
   GE
   GT
   NE
   ASSIGN
   LPAREN
   RPAREN
   LBRACE
   RBRACE
   LBRACKET
   RBRACKET
   COMMA
   SEMICOLON
   TRUE


Rules useless in parser due to conflicts

    3 expression: NUM '<' NUM


State 7conflicts: 1 reduce/reduce


Grammar

    0 $accept: condition $end

    1 condition: expression
    2          | NUM '<' NUM

    3 expression: NUM '<' NUM
    4           | NUM '+' NUM
    5           | NUM


Terminals, with rules where they appear

$end (0) 0
'+' (43) 4
'<' (60) 2 3
error (256)
ID (258)
NUM (259) 2 3 4 5
STRING (260)
SHARED (261)
PRIVATE (262)
INTEGER (263)
SEMAPHORE (264)
RESTRICT (265)
PROGRAM (266)
PROCEDURE (267)
PROCESS (268)
P (269)
V (270)
ASSERT (271)
PRINT (272)
WHILE (273)
IF (274)
THEN (275)
ELSE (276)
PLUS (277)
MINUS (278)
TIMES (279)
MOD (280)
AND (281)
OR (282)
NOT (283)
LE (284)
LT (285)
EQ (286)
GE (287)
GT (288)
NE (289)
ASSIGN (290)
LPAREN (291)
RPAREN (292)
LBRACE (293)
RBRACE (294)
LBRACKET (295)
RBRACKET (296)
COMMA (297)
SEMICOLON (298)
TRUE (299)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
condition (48)
    on left: 1 2, on right: 0
expression (49)
    on left: 3 4 5, on right: 1


State 0

    0 $accept: . condition $end

    NUM  shift, and go to state 1

    condition   go to state 2
    expression  go to state 3


State 1

    2 condition: NUM . '<' NUM
    3 expression: NUM . '<' NUM
    4           | NUM . '+' NUM
    5           | NUM .

    '<'  shift, and go to state 4
    '+'  shift, and go to state 5

    $default  reduce using rule 5 (expression)


State 2

    0 $accept: condition . $end

    $end  shift, and go to state 6


State 3

    1 condition: expression .

    $default  reduce using rule 1 (condition)


State 4

    2 condition: NUM '<' . NUM
    3 expression: NUM '<' . NUM

    NUM  shift, and go to state 7


State 5

    4 expression: NUM '+' . NUM

    NUM  shift, and go to state 8


State 6

    0 $accept: condition $end .

    $default  接受


State 7

    2 condition: NUM '<' NUM .
    3 expression: NUM '<' NUM .

    $end      reduce using rule 2 (condition)
    $end      [reduce using rule 3 (expression)]
    $default  reduce using rule 2 (condition)


State 8

    4 expression: NUM '+' NUM .

    $default  reduce using rule 4 (expression)
